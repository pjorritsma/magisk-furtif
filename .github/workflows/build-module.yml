name: Build MagiskFurtif Module

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'monitor_live.sh'
    tags:
      - 'v*'
  release:
    types: [ created, edited ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      run: |
        echo "Setting up repository checkout..."
        echo "Current working directory:"
        pwd
        
        # Clone the repository manually since we can't use external actions
        echo "Cloning repository..."
        git clone https://github.com/${{ github.repository }}.git temp-repo
        
        # Copy files to current directory
        echo "Copying repository files..."
        cp -r temp-repo/* .
        cp -r temp-repo/.* . 2>/dev/null || true
        
        # Clean up
        rm -rf temp-repo
        
        echo "Repository checkout completed"
        echo "Repository contents:"
        ls -la
        echo "Checking if base directory exists:"
        if [ -d "base" ]; then
          echo "✅ base directory found"
          ls -la base/
        else
          echo "❌ base directory not found"
          echo "Available directories:"
          find . -type d -maxdepth 2
        fi
    
    - name: Set up Python
      run: |
        echo "Python setup completed"
        python3 --version
        
    - name: Install GitHub CLI
      run: |
        echo "Installing GitHub CLI..."
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh -y
        gh --version
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Verify directory structure
      run: |
        echo "Verifying required files exist..."
        echo "Current working directory:"
        pwd
        
        echo "Current directory contents:"
        ls -la
        
        echo "Base directory contents:"
        if [ -d "base" ]; then
          ls -la base/
        else
          echo "ERROR: base directory not found!"
          echo "Available directories:"
          find . -type d -maxdepth 2
          exit 1
        fi
        
        # Verify required files exist with better error messages
        echo "Checking for base/service.sh..."
        if [ -f "base/service.sh" ]; then
          echo "✅ base/service.sh found"
        else
          echo "ERROR: base/service.sh not found!"
          echo "Files in base directory:"
          ls -la base/
          exit 1
        fi
        
        echo "Checking for base/install.sh..."
        if [ -f "base/install.sh" ]; then
          echo "✅ base/install.sh found"
        else
          echo "ERROR: base/install.sh not found!"
          echo "Files in base directory:"
          ls -la base/
          exit 1
        fi
        
        echo "Checking for base/module.prop..."
        if [ -f "base/module.prop" ]; then
          echo "✅ base/module.prop found"
        else
          echo "ERROR: base/module.prop not found!"
          echo "Files in base directory:"
          ls -la base/
          exit 1
        fi
        
        echo "✅ All required files found!"
        
    - name: Build Magisk Module
      id: build
      run: |
        # Build module with Python script
        python build.py
        
        # Find the created ZIP file
        ZIP_FILE=$(find builds -name "*.zip" | head -n 1)
        if [ -n "$ZIP_FILE" ]; then
          echo "Created ZIP file: $ZIP_FILE"
          echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV
          
          # Extract version from filename (updated for new naming)
          VERSION=$(echo $ZIP_FILE | grep -oP 'MagiskFurtif-f3ger-\K[0-9.]+(?=\.zip)')
          echo "Extracted version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          # Verify ZIP file exists and has content
          if [ -f "$ZIP_FILE" ]; then
            echo "ZIP file size: $(ls -lh $ZIP_FILE | awk '{print $5}')"
            echo "ZIP file contents:"
            unzip -l "$ZIP_FILE" | head -20
          else
            echo "ERROR: ZIP file not found after build!"
            exit 1
          fi
        else
          echo "ERROR: No ZIP file was created, build failed!"
          exit 1
        fi
        
    - name: Upload artifact
      run: |
        echo "Artifact created: $ZIP_FILE"
        echo "File size: $(ls -lh $ZIP_FILE | awk '{print $5}')"
        echo "Build completed successfully!"
        
        # Debug: List all files in builds directory
        echo "Files in builds directory:"
        ls -la builds/
        
        # Debug: Verify ZIP file contents
        echo "ZIP file contents:"
        unzip -l "$ZIP_FILE" | head -20
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ZIP_FILE: ${{ env.ZIP_FILE }}
        VERSION: ${{ env.VERSION }}
      run: |
        # Extract tag name from ref
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "Creating release for tag: $TAG_NAME"
        echo "ZIP file: $ZIP_FILE"
        echo "Version: $VERSION"
        
        # Verify ZIP file exists
        if [ ! -f "$ZIP_FILE" ]; then
          echo "❌ ERROR: ZIP file not found: $ZIP_FILE"
          echo "Available files:"
          ls -la builds/
          exit 1
        fi
        
        echo "✅ ZIP file found: $ZIP_FILE"
        echo "File size: $(ls -lh $ZIP_FILE | awk '{print $5}')"
        
        # Create release using GitHub CLI
        gh release create "$TAG_NAME" \
          --title "MagiskFurtif $TAG_NAME" \
          --notes "## MagiskFurtif $TAG_NAME
        
        ### 📦 Module Files
        - **MagiskFurtif-f3ger-$VERSION.zip** - Main module package
        
        ### 🚀 Installation
        1. Download the ZIP file
        2. Install via Magisk Manager
        3. Reboot your device
        
        ### 📋 Features
        - Enhanced monitoring service
        - Discord notifications
        - Auto-start functionality
        - Improved IP detection
        - Better error handling
        
        ### 🔧 Requirements
        - Magisk 15.3+
        - Android device with root access
        - jq and curl tools (pre-installed on PoGoROM devices)" \
          "$ZIP_FILE"
        
        echo "✅ Release created successfully with ZIP file!"
          
    - name: Update updater.json
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VERSION: ${{ env.VERSION }}
      run: |
        # Extract tag name from ref
        TAG_NAME=${GITHUB_REF#refs/tags/}
        VERSION_CODE=$(echo $VERSION | sed 's/\.//g')
        
        echo "Updating updater.json for version: $VERSION"
        echo "Tag: $TAG_NAME"
        echo "Version Code: $VERSION_CODE"
        
        # Create temporary JSON file with correct naming
        cat > updater.json.tmp << EOF
        {
            "version": "$VERSION",
            "versionCode": $VERSION_CODE,
            "zipUrl": "https://github.com/${{ github.repository }}/releases/download/$TAG_NAME/MagiskFurtif-f3ger-$VERSION.zip"
        }
        EOF
        
        # Replace existing updater.json
        mv updater.json.tmp updater.json
        
        echo "Updated updater.json content:"
        cat updater.json
        
        # Commit and push the updated updater.json
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add updater.json
        git commit -m "Update updater.json to version $VERSION [skip ci]"
        git push origin main
        
        echo "✅ updater.json updated and pushed successfully"