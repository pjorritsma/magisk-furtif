name: Build MagiskFurtif Module

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'monitor_live.sh'
  release:
    types: [ created, edited ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      run: |
        echo "Repository checked out successfully"
        echo "Current working directory:"
        pwd
        echo "Repository contents:"
        ls -la
        echo "Checking if base directory exists:"
        if [ -d "base" ]; then
          echo "✅ base directory found"
          ls -la base/
        else
          echo "❌ base directory not found"
          echo "Available directories:"
          find . -type d -maxdepth 2
        fi
    
    - name: Set up Python
      run: |
        echo "Python setup completed"
        python3 --version
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Verify directory structure
      run: |
        echo "Verifying required files exist..."
        echo "Current working directory:"
        pwd
        
        echo "Current directory contents:"
        ls -la
        
        echo "Base directory contents:"
        if [ -d "base" ]; then
          ls -la base/
        else
          echo "ERROR: base directory not found!"
          echo "Available directories:"
          find . -type d -maxdepth 2
          exit 1
        fi
        
        # Verify required files exist with better error messages
        echo "Checking for base/service.sh..."
        if [ -f "base/service.sh" ]; then
          echo "✅ base/service.sh found"
        else
          echo "ERROR: base/service.sh not found!"
          echo "Files in base directory:"
          ls -la base/
          exit 1
        fi
        
        echo "Checking for base/install.sh..."
        if [ -f "base/install.sh" ]; then
          echo "✅ base/install.sh found"
        else
          echo "ERROR: base/install.sh not found!"
          echo "Files in base directory:"
          ls -la base/
          exit 1
        fi
        
        echo "Checking for base/module.prop..."
        if [ -f "base/module.prop" ]; then
          echo "✅ base/module.prop found"
        else
          echo "ERROR: base/module.prop not found!"
          echo "Files in base directory:"
          ls -la base/
          exit 1
        fi
        
        echo "✅ All required files found!"
        
    - name: Build Magisk Module
      id: build
      run: |
        # Build module with Python script
        python build.py
        
        # Find the created ZIP file
        ZIP_FILE=$(find builds -name "*.zip" | head -n 1)
        if [ -n "$ZIP_FILE" ]; then
          echo "Created ZIP file: $ZIP_FILE"
          echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV
          
          # Extract version from filename (updated for new naming)
          VERSION=$(echo $ZIP_FILE | grep -oP 'MagiskFurtif-f3ger-\K[0-9.]+(?=\.zip)')
          echo "Extracted version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          # Verify ZIP file exists and has content
          if [ -f "$ZIP_FILE" ]; then
            echo "ZIP file size: $(ls -lh $ZIP_FILE | awk '{print $5}')"
            echo "ZIP file contents:"
            unzip -l "$ZIP_FILE" | head -20
          else
            echo "ERROR: ZIP file not found after build!"
            exit 1
          fi
        else
          echo "ERROR: No ZIP file was created, build failed!"
          exit 1
        fi
        
    - name: Upload artifact
      run: |
        echo "Artifact created: $ZIP_FILE"
        echo "File size: $(ls -lh $ZIP_FILE | awk '{print $5}')"
        echo "Build completed successfully!"
        
    - name: Upload to Release
      if: github.event_name == 'release'
      run: |
        echo "Release upload would happen here"
        echo "ZIP file: $ZIP_FILE"
        echo "Release tag: ${{ github.event.release.tag_name }}"
          
    - name: Update updater.json
      if: github.event_name == 'release'
      run: |
        # Checkout the main branch explicitly
        git checkout main
        
        VERSION="${{ env.VERSION }}"
        VERSION_CODE=$(echo $VERSION | sed 's/\.//g')
        
        # Create temporary JSON file with correct naming
        cat > updater.json.tmp << EOF
        {
            "version": "$VERSION",
            "versionCode": $VERSION_CODE,
            "zipUrl": "https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/MagiskFurtif-f3ger-$VERSION.zip"
        }
        EOF
        
        # Replace existing updater.json
        mv updater.json.tmp updater.json
        
        echo "Updater.json updated successfully"
        echo "Version: $VERSION"
        echo "Repository: ${{ github.repository }}"
        echo "Release tag: ${{ github.event.release.tag_name }}"